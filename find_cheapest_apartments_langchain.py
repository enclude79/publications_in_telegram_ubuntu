import os
import pandas as pd
import logging
from datetime import datetime
import json
import re
import psycopg2
from decimal import Decimal
from langchain_community.utilities import SQLDatabase
from load_env import load_environment_variables
from dotenv import load_dotenv
import asyncio
import aiohttp
import html

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_dir = "logs"
os.makedirs(log_dir, exist_ok=True)
log_filename = f'{log_dir}/find_apartments_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log'

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_environment_variables()
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
logger.info(f"OPENROUTER_API_KEY: {'–ù–∞–π–¥–µ–Ω' if os.getenv('OPENROUTER_API_KEY') else '–ù–µ –Ω–∞–π–¥–µ–Ω'}")
logger.info(f"TELEGRAM_BOT_TOKEN: {'–ù–∞–π–¥–µ–Ω' if os.getenv('TELEGRAM_BOT_TOKEN') else '–ù–µ –Ω–∞–π–¥–µ–Ω'}")
logger.info(f"TELEGRAM_CHAT_ID: {'–ù–∞–π–¥–µ–Ω' if os.getenv('TELEGRAM_CHAT_ID') else '–ù–µ –Ω–∞–π–¥–µ–Ω'}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Decimal –≤ JSON
class DecimalEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, Decimal):
            return float(obj)
        return super(DecimalEncoder, self).default(obj)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PARAMS = {
    'dbname': os.getenv('DB_NAME', 'postgres'),
    'user': os.getenv('DB_USER', 'postgres'),
    'password': os.getenv('DB_PASSWORD', ''),
    'host': os.getenv('DB_HOST', 'localhost'),
    'port': os.getenv('DB_PORT', '5432')
}

# –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
CONNECTION_STRING = f"postgresql://{DB_PARAMS['user']}:{DB_PARAMS['password']}@{DB_PARAMS['host']}:{DB_PARAMS['port']}/{DB_PARAMS['dbname']}"

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
RESULTS_DIR = "analysis_results"
os.makedirs(RESULTS_DIR, exist_ok=True)
RESULT_FILENAME = f"cheapest_apartments_with_urls_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"

TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHANNEL_ID = os.getenv('TELEGRAM_CHANNEL_ID')

def extract_neighborhood(location_json):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞ –∏–∑ JSON —Å—Ç—Ä–æ–∫–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å JSON —Å –æ–¥–∏–Ω–∞—Ä–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏
        if location_json and "'" in location_json:
            location_json = location_json.replace("'", '"')
        
        # –ü–∞—Ä—Å–∏–º JSON
        data = json.loads(location_json)
        
        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å type = neighbourhood
        for item in data:
            if item.get('type') == 'neighbourhood':
                return item.get('name')
        
        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å level = 2 (–æ–±—ã—á–Ω–æ —ç—Ç–æ —Ä–∞–π–æ–Ω)
        for item in data:
            if item.get('level') == 2:
                return item.get('name')
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ –ø–æ —Ç–∏–ø—É, –Ω–∏ –ø–æ —É—Ä–æ–≤–Ω—é, –±–µ—Ä–µ–º –≥–æ—Ä–æ–¥ (level = 1)
        for item in data:
            if item.get('level') == 1:
                return item.get('name')
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç name
        if data and len(data) > 0:
            return data[0].get('name')
        
        return None
    except (json.JSONDecodeError, TypeError) as e:
        # –ï—Å–ª–∏ JSON –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
        try:
            # –ò—â–µ–º —Ç–∏–ø neighbourhood
            neighbourhood_match = re.search(r'"type": "neighbourhood".*?"name": "([^"]+)"', location_json)
            if neighbourhood_match:
                return neighbourhood_match.group(1)
            
            # –ò—â–µ–º —É—Ä–æ–≤–µ–Ω—å 2
            level2_match = re.search(r'"level": 2.*?"name": "([^"]+)"', location_json)
            if level2_match:
                return level2_match.group(1)
            
            # –ò—â–µ–º —É—Ä–æ–≤–µ–Ω—å 1
            level1_match = re.search(r'"level": 1.*?"name": "([^"]+)"', location_json)
            if level1_match:
                return level1_match.group(1)
            
            # –ò—â–µ–º –ª—é–±–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            name_match = re.search(r'"name": "([^"]+)"', location_json)
            if name_match:
                return name_match.group(1)
        except:
            pass
        
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ä–∞–π–æ–Ω–∞: {e}")
        return None

def get_db_connection():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = psycopg2.connect(**DB_PARAMS)
        conn.set_client_encoding('UTF8')
        logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return conn
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def get_cheapest_apartments():
    conn = None
    try:
        conn = get_db_connection()
        if not conn:
            return pd.DataFrame()
        
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è bayut_api_view
        cursor.execute("""
            SELECT EXISTS (
                SELECT FROM information_schema.views 
                WHERE table_name = 'bayut_api_view'
            )
        """)
        
        view_exists = cursor.fetchone()[0]
        table_name = 'bayut_api_view' if view_exists else 'bayut_properties'
        
        # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–≤–∞—Ä—Ç–∏—Ä–∞—Ö
        query = f"""
        SELECT 
            id, 
                title, 
                price, 
                rooms, 
                baths, 
                area, 
                rent_frequency,
                location, 
                property_type,
                property_url,
                furnishing_status,
                completion_status,
                amenities,
                agency_name
            FROM {table_name}
            WHERE price > 0 AND price <= %s
            ORDER BY price
            LIMIT %s
        """
        
        cursor.execute(query, (5000000, 15))
        apartments = cursor.fetchall()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        columns = ['id', 'title', 'price', 'rooms', 'baths', 'area', 
                  'rent_frequency', 'location', 'property_type', 'property_url',
                  'furnishing_status', 'completion_status', 'amenities', 'agency_name']
        
        result = pd.DataFrame(apartments, columns=columns)
        
        cursor.close()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(result)} –∫–≤–∞—Ä—Ç–∏—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        return result
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—à–µ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä: {e}")
        return pd.DataFrame()
    
    finally:
        if conn:
            conn.close()

def clean_html_and_sanitize(text):
    text = html.unescape(text)
    text = re.sub(r'<[^>]+>', '', text)
    text = text.replace('&', '&amp;')
    text = text.replace('<', '&lt;')
    text = text.replace('>', '&gt;')
    text = re.sub(r'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x9F]', '', text)
    return text

def split_text_into_chunks(text, max_length=3000):
    chunks = []
    current_chunk = ""
    paragraphs = text.split('\n')
    for paragraph in paragraphs:
        if len(current_chunk) + len(paragraph) + 1 > max_length:
            chunks.append(current_chunk.strip())
            current_chunk = paragraph + "\n"
        else:
            current_chunk += paragraph + "\n"
    if current_chunk.strip():
        chunks.append(current_chunk.strip())
    return chunks

def format_apartments_report(df):
    if df.empty:
        return "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–≤–∞—Ä—Ç–∏—Ä, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º."
    output = "–¢—Ä–∏ —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä—ã (–ø–ª–æ—â–∞–¥—å –¥–æ 40 –∫–≤.–º.) –≤ –∫–∞–∂–¥–æ–π –ª–æ–∫–∞—Ü–∏–∏:\n\n"
    for location, group in df.groupby('location'):
        output += f"–õ–æ–∫–∞—Ü–∏—è: {location}\n"
        output += "-" * 30 + "\n"
        for i, (_, row) in enumerate(group.sort_values('price').iterrows(), 1):
            output += f"{i}. {row['title']}\n"
            output += f"   ID: {row['id']}\n"
            output += f"   –¶–µ–Ω–∞: {float(row['price']):,.2f} AED\n"
            output += f"   –ü–ª–æ—â–∞–¥—å: {float(row['area']):,.2f} –∫–≤.–º.\n"
            output += f"   –°–ø–∞–ª—å–Ω–∏: {row['rooms']}\n"
            output += f"   –°—Å—ã–ª–∫–∞: {row['property_url']}\n"
            output += "\n"
        output += "\n"
    return output

async def send_to_telegram(text):
    api_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    text = clean_html_and_sanitize(text)
    chunks = split_text_into_chunks(text, max_length=3000)
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHANNEL_ID:
        logger.error("TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHANNEL_ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env!")
        return
    connector = aiohttp.TCPConnector()  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π SSL
    async with aiohttp.ClientSession(connector=connector) as session:
        for i, chunk in enumerate(chunks):
            if i == 0:
                chunk = f"üìä –ê–Ω–∞–ª–∏–∑ –∫–≤–∞—Ä—Ç–∏—Ä –¥–æ 40 –∫–≤.–º. - {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n" + chunk
            if i == len(chunks) - 1:
                chunk = chunk + "\n\n#–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å #–∞–Ω–∞–ª–∏–∑ #–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"
            try:
                async with session.post(api_url, json={"chat_id": TELEGRAM_CHANNEL_ID, "text": chunk}) as response:
                    if response.status == 200:
                        logger.info(f"–ß–∞—Å—Ç—å {i+1}/{len(chunks)} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram ({len(chunk)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    else:
                        error_text = await response.text()
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ {i+1}/{len(chunks)}: {error_text}")
                        error_file = f"error_chunk_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{i}.txt"
                        with open(error_file, 'w', encoding='utf-8') as f:
                            f.write(chunk)
                        logger.info(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–π —á–∞–Ω–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {error_file}")
                await asyncio.sleep(1)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ {i+1}/{len(chunks)}: {e}")
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(chunks)} —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è")

def main():
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    logger.info(f"TELEGRAM_BOT_TOKEN: {'–ù–∞–π–¥–µ–Ω' if TELEGRAM_BOT_TOKEN else '–ù–µ –Ω–∞–π–¥–µ–Ω'}")
    logger.info(f"TELEGRAM_CHANNEL_ID: {'–ù–∞–π–¥–µ–Ω' if TELEGRAM_CHANNEL_ID else '–ù–µ –Ω–∞–π–¥–µ–Ω'}")
    df = get_cheapest_apartments()
    report = format_apartments_report(df)
    print(report)
    asyncio.run(send_to_telegram(report))

if __name__ == "__main__":
    main() 