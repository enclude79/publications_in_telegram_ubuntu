"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ Telegram –∫–∞–Ω–∞–ª.
"""

import os
import logging
import asyncio
import ssl
import re
import html
from datetime import datetime
from dotenv import load_dotenv
import aiohttp
from find_cheapest_apartments import find_cheapest_apartments

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç
ssl_context = ssl.create_default_context()
ssl_context.check_hostname = False
ssl_context.verify_mode = ssl.CERT_NONE

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ .env
DB_PARAMS = {
    'dbname': os.getenv('DB_NAME', 'postgres'),
    'user': os.getenv('DB_USER', 'Admin'),
    'password': os.getenv('DB_PASSWORD', 'Enclude79'),
    'host': os.getenv('DB_HOST', 'localhost'),
    'port': os.getenv('DB_PORT', '5432')
}

def clean_html_and_sanitize(text):
    """
    –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç HTML-—Ç–µ–≥–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, 
    –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ Telegram.
    """
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º HTML-—Å—É—â–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, &quot; -> ")
    text = html.unescape(text)
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ HTML-—Ç–µ–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>—Ç–µ–∫—Å—Ç</b> -> —Ç–µ–∫—Å—Ç)
    text = re.sub(r'<[^>]+>', '', text)
    
    # –ó–∞–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
    text = text.replace('&', '&amp;')
    text = text.replace('<', '&lt;')
    text = text.replace('>', '&gt;')
    
    # –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
    text = re.sub(r'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x9F]', '', text)
    
    return text

def split_text_into_chunks(text, max_length=3000):
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞–Ω–∫–∏, —Å—Ç–∞—Ä–∞—è—Å—å –¥–µ–ª–∞—Ç—å —Ä–∞–∑—Ä—ã–≤—ã –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞—Ö —Å—Ç—Ä–æ–∫
    –∏ –Ω–µ —Ä–∞–∑—Ä—ã–≤–∞—Ç—å —Å–ª–æ–≤–∞.
    """
    chunks = []
    current_chunk = ""
    
    paragraphs = text.split('\n')
    
    for paragraph in paragraphs:
        # –ï—Å–ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if len(paragraph) > max_length:
            sentences = re.split(r'(?<=[.!?])\s+', paragraph)
            for sentence in sentences:
                # –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏
                if len(sentence) > max_length:
                    words = sentence.split(' ')
                    for word in words:
                        if len(current_chunk) + len(word) + 1 > max_length:
                            chunks.append(current_chunk.strip())
                            current_chunk = word + " "
                        else:
                            current_chunk += word + " "
                # –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ü–µ–ª–∏–∫–æ–º
                elif len(current_chunk) + len(sentence) + 1 > max_length:
                    chunks.append(current_chunk.strip())
                    current_chunk = sentence + " "
                else:
                    current_chunk += sentence + " "
        # –ï—Å–ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ –ø–æ–º–µ—â–∞–µ—Ç—Å—è —Ü–µ–ª–∏–∫–æ–º
        elif len(current_chunk) + len(paragraph) + 1 > max_length:
            chunks.append(current_chunk.strip())
            current_chunk = paragraph + "\n"
        else:
            current_chunk += paragraph + "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
    if current_chunk.strip():
        chunks.append(current_chunk.strip())
    
    return chunks

class TelegramPublisher:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤ Telegram"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞"""
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.chat_id = os.getenv('TELEGRAM_CHANNEL_ID')
        self.api_url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        print(f"TELEGRAM_BOT_TOKEN: {self.bot_token}")
        print(f"TELEGRAM_CHANNEL_ID: {self.chat_id}")
    
    async def send_message(self, text):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram, —Ä–∞–∑–±–∏–≤–∞—è –Ω–∞ —á–∞—Å—Ç–∏"""
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç HTML-—Ç–µ–≥–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        text = clean_html_and_sanitize(text)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        chunks = split_text_into_chunks(text, max_length=3000)
        
        try:
            connector = aiohttp.TCPConnector(ssl=ssl_context)
            async with aiohttp.ClientSession(connector=connector) as session:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —á–∞–Ω–∫
                for i, chunk in enumerate(chunks):
                    # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —á–∞–Ω–∫–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    if i == 0:
                        chunk = f"üìä –ê–Ω–∞–ª–∏–∑ –∫–≤–∞—Ä—Ç–∏—Ä –¥–æ 40 –∫–≤.–º. - {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n" + chunk
                    
                    # –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–∞–Ω–∫–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ö—ç—à—Ç–µ–≥–∏
                    if i == len(chunks) - 1:
                        chunk = chunk + "\n\n#–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å #–∞–Ω–∞–ª–∏–∑ #–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –∫–∞–∂–¥–æ–≥–æ —á–∞–Ω–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                    if len(chunk) > 4000:
                        logger.warning(f"–ß–∞–Ω–∫ {i+1} —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(chunk)} —Å–∏–º–≤–æ–ª–æ–≤), –æ–±—Ä–µ–∑–∞–µ–º –¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤")
                        chunk = chunk[:3997] + "..."
                    
                    try:
                        async with session.post(
                            self.api_url,
                            json={
                                "chat_id": self.chat_id,
                                "text": chunk
                            }
                        ) as response:
                            if response.status == 200:
                                logger.info(f"–ß–∞—Å—Ç—å {i+1}/{len(chunks)} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram ({len(chunk)} —Å–∏–º–≤–æ–ª–æ–≤)")
                            else:
                                error_text = await response.text()
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ {i+1}/{len(chunks)}: {error_text}")
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —á–∞–Ω–∫ –≤ —Ñ–∞–π–ª –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                                error_file = f"error_chunk_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{i}.txt"
                                with open(error_file, 'w', encoding='utf-8') as f:
                                    f.write(chunk)
                                logger.info(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–π —á–∞–Ω–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {error_file}")
                                
                                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
                                if len(chunk) > 1000:
                                    shortened = chunk[:950] + "... (—Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–æ)"
                                    logger.info("–ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —á–∞–Ω–∫–∞")
                                    async with session.post(
                                        self.api_url,
                                        json={
                                            "chat_id": self.chat_id,
                                            "text": shortened
                                        }
                                    ) as retry_response:
                                        if retry_response.status == 200:
                                            logger.info("–°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —á–∞–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                                        else:
                                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é: {await retry_response.text()}")
                                            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–∏–º —á–∞–Ω–∫–æ–º, –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                        await asyncio.sleep(1)
                        
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ {i+1}/{len(chunks)}: {e}")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–∏–º —á–∞–Ω–∫–æ–º, –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(chunks)} —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è")
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
            return False

    async def publish_analysis(self):
        """–ü—É–±–ª–∏–∫—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ Telegram"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑
            logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–≤–∞—Ä—Ç–∏—Ä...")
            analysis = find_cheapest_apartments()
            
            if not analysis:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑")
                return False
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            logger.info(f"–ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –∞–Ω–∞–ª–∏–∑–∞: {analysis[:100]}")
            logger.info(f"–û–±—â–∞—è –¥–ª–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞: {len(analysis)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤ Telegram...")
            success = await self.send_message(analysis)
            
            if success:
                logger.info("–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ Telegram")
            else:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –≤ Telegram")
                
            return success
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –≤ Telegram")
    publisher = TelegramPublisher()
    success = await publisher.publish_analysis()
    if success:
        print("–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ Telegram")
    else:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –≤ Telegram")

if __name__ == "__main__":
    asyncio.run(main()) 